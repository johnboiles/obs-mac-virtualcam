name: Build and (maybe) Release

on:
  pull_request:
  push:
    branches:
    - master
    - pkg-build
    tags:
    - "v*"

jobs:
  build:
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.13
      MACOS_DEPS_VERSION: '2020-08-30'
      QT_VERSION: '5.14.1'
      obs-studio-ref: 26.0.2
    runs-on: macos-latest

    steps:
    - name: Checkout obs-mac-virtualcam
      uses: actions/checkout@v2
      with:
        path: obs-mac-virtualcam

    - name: 'Restore pre-built dependencies from cache'
      id: deps-cache
      uses: actions/cache@v2.1.2
      env:
        CACHE_NAME: 'deps-cache'
      with:
        path: /tmp/obsdeps
        key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.MACOS_DEPS_VERSION }}

    - name: 'Restore pre-built Qt dependency from cache'
      id: deps-qt-cache
      uses: actions/cache@v2.1.2
      env:
        CACHE_NAME: 'deps-qt-cache'
      with:
        path: /tmp/obsdeps
        key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.MACOS_DEPS_VERSION }}

    - name: 'Install prerequisite: Pre-built dependencies'
      if: steps.deps-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/macos-deps-${{ env.MACOS_DEPS_VERSION }}.tar.gz
        tar -xf ./macos-deps-${{ env.MACOS_DEPS_VERSION }}.tar.gz -C "/tmp"

    - name: 'Install prerequisite: Pre-built dependency Qt'
      if: steps.deps-qt-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/macos-qt-${{ env.QT_VERSION }}-${{ env.MACOS_DEPS_VERSION }}.tar.gz
        tar -xf ./macos-qt-${{ env.QT_VERSION }}-${{ env.MACOS_DEPS_VERSION }}.tar.gz -C "/tmp"
        xattr -r -d com.apple.quarantine /tmp/obsdeps

    - name: Cache OBS Build
      id: cache-obs-build
      uses: actions/cache@v1
      with:
        path: obs-studio
        key: obs-studio-${{ env.obs-studio-ref }}-macOS${{ env.MACOSX_DEPLOYMENT_TARGET }}

    - name: Checkout OBS
      if: steps.cache-obs-build.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: obsproject/obs-studio
        path: obs-studio
        submodules: recursive
        ref: ${{ env.obs-studio-ref }}

    - name: Build OBS
      if: steps.cache-obs-build.outputs.cache-hit != 'true'
      run: |
        mkdir -p obs-studio/build
        cd obs-studio/build

        cmake -DQTDIR="/tmp/obsdeps" -DSWIGDIR="/tmp/obsdeps" -DDepsPath="/tmp/obsdeps" -DDISABLE_PYTHON=ON ..
        make -j

    - name: Build the OBS plugin
      run: |
        mkdir obs-mac-virtualcam/build
        cd obs-mac-virtualcam/build

        cmake -DLIBOBS_INCLUDE_DIR:STRING=$GITHUB_WORKSPACE/obs-studio/libobs \
          -DLIBOBS_LIB:STRING=$GITHUB_WORKSPACE/obs-studio/build/libobs/libobs.dylib \
          -DOBS_FRONTEND_LIB:STRING=$GITHUB_WORKSPACE/obs-studio/build/UI/obs-frontend-api/libobs-frontend-api.dylib \
          -DQTDIR:STRING=/tmp/obsdeps ..

        make -j obs-plugin

    - name: Build the DAL plugin
      run: |
        rm -rf obs-mac-virtualcam/build
        mkdir obs-mac-virtualcam/build
        cd obs-mac-virtualcam/build

        cmake -DLIBOBS_INCLUDE_DIR:STRING=$GITHUB_WORKSPACE/obs-studio/libobs \
          -DLIBOBS_LIB:STRING=$GITHUB_WORKSPACE/obs-studio/build/libobs/libobs.dylib \
          -DOBS_FRONTEND_LIB:STRING=$GITHUB_WORKSPACE/obs-studio/build/UI/obs-frontend-api/libobs-frontend-api.dylib \
          -DQTDIR:STRING=/tmp/obsdeps -D CMAKE_OSX_ARCHITECTURES="arm64;x86_64" ..

        make -j dal-plugin

    - name: Fix runtime QT deps
      run: |
        install_name_tool \
          -change /tmp/obsdeps/lib/QtWidgets.framework/Versions/5/QtWidgets \
            @executable_path/../Frameworks/QtWidgets.framework/Versions/5/QtWidgets \
          -change /tmp/obsdeps/lib/QtGui.framework/Versions/5/QtGui \
            @executable_path/../Frameworks/QtGui.framework/Versions/5/QtGui \
          -change /tmp/obsdeps/lib/QtCore.framework/Versions/5/QtCore \
            @executable_path/../Frameworks/QtCore.framework/Versions/5/QtCore \
          obs-mac-virtualcam/build/src/obs-plugin/obs-mac-virtualcam.so

    - name: Copy artifacts
      run: |
        mkdir -p artifacts

        cp -r obs-mac-virtualcam/build/src/dal-plugin/obs-mac-virtualcam.plugin artifacts/
        cp obs-mac-virtualcam/build/src/obs-plugin/obs-mac-virtualcam.so artifacts/

    - name: Upload Raw PlugIn Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: raw-plugins
        path: artifacts

    - name: Install Apple certificates
      if: github.ref == 'refs/heads/master' || contains(github.ref, 'refs/tags/v')
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
        p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

    - name: Package Plugin
      if: github.ref == 'refs/heads/master' || contains(github.ref, 'refs/tags/v')
      run: ./ci/macos/package-macos.sh
      working-directory: ./obs-mac-virtualcam
      env:
        RELEASE_MODE: "True"
        CODE_SIGNING_IDENTITY: John Boiles
        INSTALLER_SIGNING_IDENTITY: John Boiles
        AC_USERNAME: ${{ secrets.NOTARAZATION_USERNAME }}
        AC_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
        AC_PROVIDER_SHORTNAME: ${{ secrets.NOTARIZATION_PROVIDER_SHORTNAME }}

    - name: Upload .pkg Installer
      uses: actions/upload-artifact@v1
      if: github.ref == 'refs/heads/master' || contains(github.ref, 'refs/tags/v')
      with:
        name: pkg-installer
        path: obs-mac-virtualcam/release
